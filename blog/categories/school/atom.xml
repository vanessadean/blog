<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: School | Codemaster Extraordinaire]]></title>
  <link href="http://vanessadean.github.io/blog/categories/school/atom.xml" rel="self"/>
  <link href="http://vanessadean.github.io/"/>
  <updated>2014-08-14T11:48:29-04:00</updated>
  <id>http://vanessadean.github.io/</id>
  <author>
    <name><![CDATA[Vanessa Dean]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Setting Up Action Mailer With Mandrill]]></title>
    <link href="http://vanessadean.github.io/blog/2014/08/14/setting-up-action-mailer-with-mandrill/"/>
    <updated>2014-08-14T10:59:25-04:00</updated>
    <id>http://vanessadean.github.io/blog/2014/08/14/setting-up-action-mailer-with-mandrill</id>
    <content type="html"><![CDATA[<p>Setting up action mailer with Mandrill, like so many other things in Rails, is incredibly easy if you know exactly what you are supposed to do. If you are doing it for the first time though it&rsquo;s hard to know where to go for instructions. So here they are:</p>

<ul>
<li>Follow the instructions in the rails guide to set up <a href="http://guides.rubyonrails.org/action_mailer_basics.html">action mailer</a></li>
<li>Sign up with <a href="http://mandrill.com/">Mandrill</a></li>
<li>Create an API key (at the time of this was under settings > SMTP &amp; API Info)</li>
<li>Follow Mandrill&rsquo;s instructions on <a href="http://help.mandrill.com/entries/21738467-Using-Mandrill-s-SMTP-integration-with-Web-Frameworks">integrating with Ruby on Rails</a></li>
</ul>


<p>This mainly consists of adding this to your config files:</p>

<p>```ruby
  config.action_mailer.smtp_settings = {</p>

<pre><code>:address   =&gt; "smtp.mandrillapp.com",
:port      =&gt; 25, # ports 587 and 2525 are also supported with STARTTLS
:enable_starttls_auto =&gt; true, # detects and uses STARTTLS
:user_name =&gt; "MANDRILL_USERNAME",
:password  =&gt; "MANDRILL_PASSWORD", # SMTP password is any valid API key
:authentication =&gt; 'login', # Mandrill supports 'plain' or 'login'
:domain =&gt; 'yourdomain.com', # your domain to identify your server when connecting
</code></pre>

<p>  }
```</p>

<p>Then mail away!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[I Made a Really Important App]]></title>
    <link href="http://vanessadean.github.io/blog/2014/07/24/i-made-a-really-important-app/"/>
    <updated>2014-07-24T21:34:55-04:00</updated>
    <id>http://vanessadean.github.io/blog/2014/07/24/i-made-a-really-important-app</id>
    <content type="html"><![CDATA[<p>The last couple of weeks studying Rails and JavaScript have been a little rough. I&rsquo;ve been feeling frustrated and having trouble staying motivated. So this week I decided to drop back into Sinatra to build a little app that would make me feel better.</p>

<div style="margin: 0, auto;"><a href="http://buck-up.herokuapp.com/">Here it is.</a></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Little Help From My (Flatiron) Friends]]></title>
    <link href="http://vanessadean.github.io/blog/2014/07/19/a-little-help-from-my-flatiron-friends/"/>
    <updated>2014-07-19T14:16:00-04:00</updated>
    <id>http://vanessadean.github.io/blog/2014/07/19/a-little-help-from-my-flatiron-friends</id>
    <content type="html"><![CDATA[<p>Our seventh week at Flatiron School just flew by and we&rsquo;ve started studying JavaScript (on top of Rails). So much information is getting crammed into my brain that I&rsquo;m a little worried about losing track of the basics. I know that there are a ton of helpful resources out there, but some of my favorites are the blog posts that my fellow students have written. We are all roughly in the same place as noobies so their perspectives and insights are especially helpful. I&rsquo;ve been keeping track of my favorite posts in my bookmarks folder but figured it would be a lot easier to keep a few compiled here. Without further ado&hellip;</p>

<p><a href="http://ccmeyers.github.io/blog/2014/06/25/iterators-schmiterators/">Iterators Schmiterators</a>
by Catherine Myers</p>

<p><a href="http://callahanchris.github.io/blog/2014/07/17/five-useful-ruby-array-methods/">Five Useful Ruby Array Methods</a>
by Chris Callahan</p>

<p><a href="http://pcrglennon.github.io/blog/2014/06/10/rubys-hash-dot-new-and-%7B%7D/">Ruby&rsquo;s Hash.new and {}</a>
by Peter Glennon</p>

<p><a href="http://kylefdoherty.github.io/blog/2014/02/17/ruby-notes-working-with-files/">Ruby Notes &ndash; Working With Files</a>
by Kyle Doherty</p>

<p><a href="http://jbarrieault.github.io/blog/2014/07/02/error-handling-in-ruby/">Error Handling in Ruby</a>
by Jacob Barrieault</p>

<p><a href="http://www.korenlc.com/sql-cheat-sheet/">SQL Cheat Sheet</a>
by Koren Leslie Cohen</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Doing Well and Doing Good]]></title>
    <link href="http://vanessadean.github.io/blog/2014/07/10/doing-good/"/>
    <updated>2014-07-10T18:30:38-04:00</updated>
    <id>http://vanessadean.github.io/blog/2014/07/10/doing-good</id>
    <content type="html"><![CDATA[<p>We&rsquo;re at the halfway point at the Flatiron School and it&rsquo;s time to start thinking about jobs. I was curious about non-profit and social enterprise companies in the tech industry and here is a roundup of a few that I found during my research:</p>

<p><a href="http://www.donorschoose.org/">Donor&rsquo;s Choose</a>
Online charity organization that helps public school teachers raise funds for class projects. Based in New York.</p>

<p><a href="http://benetech.org/">Benetech</a>
A non-profit dedicated to developing technology focused on social benefits. Based in San Francisco.</p>

<p><a href="http://www.idealist.org/">idealist</a>
Networking site for non-profits. Based in New York.</p>

<p><a href="http://www1.networkforgood.org/">Network for Good</a>
Provides online fundraising tools to help non-profits connect with donors. Based in DC.</p>

<p><a href="https://www.crowdrise.com">CrowdRise</a>
An online fundraising site for individuals who want to raise funds for the causes that they care about.</p>

<p><a href="www.catchafire.org">Catchafire</a>
Matches professionals who
want to volunteer their skills with
non-profits who need their help. Based in New York.</p>

<p>No matter where I end up working, I definitely plan to give back through volunteering. Here are a couple of organizations in New York that I&rsquo;d like to investigate a little further:</p>

<p><a href="http://www.tealsk12.org/">TEALS</a>
Connects technology professionals with high school teachers to provide computer science classes in public schools.</p>

<p><a href="http://nycgenerationtech.com/">NYC Generation Tech</a>
An NYC non-profit dedicated to teaching young people technology and entrepreneurship skills.</p>

<p>I&rsquo;m sure there are a ton of other organizations out there and I&rsquo;m going to keep doing research.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[YAML Time]]></title>
    <link href="http://vanessadean.github.io/blog/2014/06/25/yaml-time/"/>
    <updated>2014-06-25T13:56:38-04:00</updated>
    <id>http://vanessadean.github.io/blog/2014/06/25/yaml-time</id>
    <content type="html"><![CDATA[<h2>What is YAML?</h2>

<p>To quote the <a href="http://www.yaml.org/">official YAML site</a>:</p>

<blockquote><p>YAML is a human friendly data serialization standard for all programming languages.</p></blockquote>

<h2>What does this mean?</h2>

<p>YAML helps humans store and transmit data via text, and to convey a specific structure and organization of that data, in a way that both humans and machines can understand. The <a href="http://www.yaml.org/YAML_for_ruby.html">YAML Cookbook for Ruby</a> is a great resource for learning ruby/YAML syntax and here are a few simple examples from the site to illustrate how YAML translates to ruby and vice versa:</p>

<ul>
<li>Ruby array
<code>ruby
['apple', 'banana', 'carrot']
</code></li>
<li>Yaml array
```</li>
<li>apple</li>
<li>banana</li>
<li><p>carrot
```</p></li>
<li><p>Ruby hash
<code>ruby
{ 'foo' =&gt; 'whatever', 'bar' =&gt; 'stuff' }
</code></p></li>
<li><p>Yaml hash
<code>
foo: whatever
bar: stuff
</code></p></li>
<li><p>Ruby array/hash combo
<code>ruby
{ 'foo' =&gt; 'whatever', 'bar' =&gt; [ 'uno', 'dos' ] }
</code></p></li>
<li><p>Yaml array/hash combo
```
foo: whatever
bar:</p></li>
<li>uno</li>
<li>dos
```

<h2>Ok, I get it. But how do I use YAML?</h2></li>
</ul>


<p>Here are instructions straight from the <a href="http://ruby-doc.org/stdlib-1.9.3/libdoc/yaml/rdoc/YAML.html">Ruby documentation</a>:</p>

<p>```
require &lsquo;yaml&rsquo; # STEP ONE, REQUIRE YAML!</p>

<h1>Parse a YAML string</h1>

<p>YAML.load(&ldquo;&mdash;&ndash; foo&rdquo;) #=> &ldquo;foo&rdquo;</p>

<h1>Emit some YAML</h1>

<p>YAML.dump(&ldquo;foo&rdquo;)     # => &ldquo;&mdash;&ndash; foo\n&hellip;\n&rdquo;
{ :a => &lsquo;b&rsquo;}.to_yaml  # => &ldquo;&mdash;&ndash;\n:a: b\n&rdquo;
```</p>

<p>I did not find this particularly helpful. I wanted to load a .yml file (not parse a random YAML string), but I also made things harder on myself because I refused to believe that it was that simple. YAML is just plain ol' text that tells you everything you need to know about the data and its structure. Once I tracked down a method for parsing a .yml file (thanks <a href="http://stackoverflow.com/questions/3877004/how-do-i-parse-a-yaml-file">StackOverflow</a>!) and did a little something like this</p>

<p><code>ruby
require 'yaml'
thing = YAML.load_file('some.yml')
puts thing.inspect
</code></p>

<p>to translate my YAML to ruby, the next steps for using my data became clearer. Here are some details to help illustrate.</p>

<p>I was working on a lab that consisted of building a movie database. A seed_data.yml file with the following data was provided:</p>

<h2>```</h2>

<p>movies:
&ndash; !ruby/object:Movie
  attributes:</p>

<pre><code>title: Wargames
release_date: 1983
director: John Badham
lead: Matthew Broderick
in_theaters: false
</code></pre>

<ul>
<li>!ruby/object:Movie
attributes:
  title: The Sting
  release_date: 1973
  director: George Roy Hill
  lead: Paul Newman
  in_theaters: false
  id:</li>
<li>!ruby/object:Movie
attributes:
  title: Nebraska
  release_date: 2013
  director: Alexander Payne
  lead: Bruce Dern
  in_theaters: true
```</li>
</ul>


<p>This example is a little more complex than the previous ones provided and shows the true power of YAML. The <code>!ruby/object:Movie</code> lines in the YAML file are delimiting ruby objects with the signified attributes. Parsing this data using <code>YAML.load_file()</code> produces this movies hash in ruby:</p>

<p><code>
{"movies"=&gt;
  [#&lt;Movie id: nil, title: "Wargames", release_date: 1983, director: "John Badham", lead: "Matthew Broderick", in_theaters: false&gt;,
   #&lt;Movie id: nil, title: "The Sting", release_date: 1973, director: "George Roy Hill", lead: "Paul Newman", in_theaters: false&gt;,
   #&lt;Movie id: nil, title: "Nebraska", release_date: 2013, director: "Alexander Payne", lead: "Bruce Dern", in_theaters: true&gt;,
   #&lt;Movie id: nil, title: "Muppets Most Wanted", release_date: 2014, director: "James Bobin", lead: "Tom Hiddleston", in_theaters: true&gt;,
   #&lt;Movie id: nil, title: "Zero Dark Thirty", release_date: 2012, director: "Kathryn Bigelow", lead: "Jessica Chastain", in_theaters: false&gt;]}
</code></p>

<p>Which means that the text in the .yml file can be turned into ruby objects and added to my movies database with four lines of code:</p>

<p><code>ruby
YAML.load_file('seed_data.yml')['movies'].each do |movie|
  Movie.create(movie.attributes)
  movie.save
end
</code></p>

<p>BOOM!</p>

<p><img src="../images/mc_hammer_giphy_2.gif" title="YAML Time" alt="alt text" />
(obligatory gif)</p>

<p><strong>Additional YAML resources:</strong></p>

<ul>
<li><a href="http://juixe.com/techknow/index.php/2009/10/08/jamming-with-ruby-yaml/">Using YAML in Ruby</a></li>
<li><a href="http://www.skorks.com/2010/04/serializing-and-deserializing-objects-with-ruby/">Serializing (And Deserializing) Objects With Ruby</a> (includes a discussion of JSON vs. YAML)</li>
<li><a href="http://yaml.org/spec/1.2/spec.html#id2759572">YAML&rsquo;s Relation to JSON</a></li>
<li><a href="http://www.cowtowncoder.com/blog/archives/2012/04/entry_473.html">What me like YAML? (Confessions of a JSON advocate)</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
